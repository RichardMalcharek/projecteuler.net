# region Quest
#<p>Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers are all figurate (polygonal) numbers and are generated by the following formulae:</p>
#<table><tr><td>Triangle</td>
#<td> </td>
#<td>$P_{3,n}=n(n+1)/2$</td>
#<td> </td>
#<td>$1, 3, 6, 10, 15, \dots$</td>
#</tr><tr><td>Square</td>
#<td> </td>
#<td>$P_{4,n}=n^2$</td>
#<td> </td>
#<td>$1, 4, 9, 16, 25, \dots$</td>
#</tr><tr><td>Pentagonal</td>
#<td> </td>
#<td>$P_{5,n}=n(3n-1)/2$</td>
#<td> </td>
#<td>$1, 5, 12, 22, 35, \dots$</td>
#</tr><tr><td>Hexagonal</td>
#<td> </td>
#<td>$P_{6,n}=n(2n-1)$</td>
#<td> </td>
#<td>$1, 6, 15, 28, 45, \dots$</td>
#</tr><tr><td>Heptagonal</td>
#<td> </td>
#<td>$P_{7,n}=n(5n-3)/2$</td>
#<td> </td>
#<td>$1, 7, 18, 34, 55, \dots$</td>
#</tr><tr><td>Octagonal</td>
#<td> </td>
#<td>$P_{8,n}=n(3n-2)$</td>
#<td> </td>
#<td>$1, 8, 21, 40, 65, \dots$</td>
#</tr></table><p>The ordered set of three $4$-digit numbers: $8128$, $2882$, $8281$, has three interesting properties.</p>
#<ol><li>The set is cyclic, in that the last two digits of each number is the first two digits of the next number (including the last number with the first).</li>
#<li>Each polygonal type: triangle ($P_{3,127}=8128$), square ($P_{4,91}=8281$), and pentagonal ($P_{5,44}=2882$), is represented by a different number in the set.</li>
#<li>This is the only set of $4$-digit numbers with this property.</li>
#</ol><p>Find the sum of the only ordered set of six cyclic $4$-digit numbers for which each polygonal type: triangle, square, pentagonal, hexagonal, heptagonal, and octagonal, is represented by a different number in the set.</p>
# endregion

import time
start_time = time.time()

def getTri(i):
    return int( ( i * ( i + 1 ) ) / 2 )
def getSqu(i):
    return int( i**2 )
def getPen(i):
    return int( i * ( 3 * i - 1) / 2 )
def getHex(i):
    return int( i * ( 2 * i - 1) )
def getHep(i):
    return int( i * ( 5 * i - 3) / 2 )
def getOct(i):
    return int( i * ( 3 * i - 2))
def getLists():
    List_Tri = []
    List_Squ = []
    List_Pen = []
    List_Hex = []
    List_Hep = []
    List_Oct = []
    i = 0
    counter = 0
    while len(str(counter)) <= 4:
        i += 1
        Tri = getTri(i)
        if len(str(Tri)) == 4:
            List_Tri.append(Tri)
        Squ = getSqu(i)
        if len(str(Squ)) == 4:
            List_Squ.append(Squ)
        Pen = getPen(i)
        if len(str(Pen)) == 4:
            List_Pen.append(Pen)
        Hex = getHex(i)
        if len(str(Hex)) == 4:
            List_Hex.append(Hex)
        Hep = getHep(i)
        if len(str(Hep)) == 4:
            List_Hep.append(Hep)
        Oct = getOct(i)
        if len(str(Oct)) == 4:
            List_Oct.append(Oct)
        counter = min(Tri, Squ, Pen, Hex, Hep, Oct)
    return List_Tri, List_Squ, List_Pen, List_Hex, List_Hep, List_Oct


def CyclicalFigurateNumbers():
    List_Tri, List_Squ, List_Pen, List_Hex, List_Hep, List_Oct = getLists()

    Matrix = []
    Matrix.append(List_Tri)
    Matrix.append(List_Squ)
    Matrix.append(List_Pen)
    Matrix.append(List_Hex)
    Matrix.append(List_Hep)
    Matrix.append(List_Oct)

    for item1 in Matrix[0]:
        seen1 = [0]
        pool2 = [x for x in range(0,6) if x not in seen1]

        for L2 in pool2:
            seen2 = [0, L2]
            pool3 = [x for x in range(0,6) if x not in seen2]
            for item2 in Matrix[L2]:
                if str(item1)[2:] == str(item2)[:2]:

                    for L3 in pool3:
                        seen3 = [0, L2, L3]
                        pool4 = [x for x in range(0,6) if x not in seen3]
                        for item3 in Matrix[L3]:
                            if str(item2)[2:] == str(item3)[:2]:

                                for L4 in pool4:
                                    seen4 = [0, L2, L3, L4]
                                    pool5 = [x for x in range(0,6) if x not in seen4]
                                    for item4 in Matrix[L4]:
                                        if str(item3)[2:] == str(item4)[:2]:

                                            for L5 in pool5:
                                                seen5 = [0, L2, L3, L4, L5]
                                                pool6 = [x for x in range(0,6) if x not in seen5]
                                                for item5 in Matrix[L5]:
                                                    if str(item4)[2:] == str(item5)[:2]:

                                                        for L6 in pool6:
                                                            for item6 in Matrix[L6]:
                                                                if str(item5)[2:] == str(item6)[:2]:
                                                                    if str(item6)[2:] == str(item1)[:2]:
                                                                        return item1, item2, item3, item4, item5, item6


I1, I2, I3, I4, I5, I6 = CyclicalFigurateNumbers()
print(f'{I1+I2+I3+I4+I5+I6}')

end_time = time.time()
print(f'\n runtime: {end_time - start_time}')