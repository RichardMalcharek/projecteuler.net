#<p>Pentagonal numbers are generated by the formula, $P_n=n(3n-1)/2$. The first ten pentagonal numbers are:
#$$1, 5, 12, 22, 35, 51, 70, 92, 117, 145, \dots$$</p>
#<p>It can be seen that $P_4 + P_7 = 22 + 70 = 92 = P_8$. However, their difference, $70 - 22 = 48$, is not pentagonal.</p>
#<p>Find the pair of pentagonal numbers, $P_j$ and $P_k$, for which their sum and difference are pentagonal and $D = |P_k - P_j|$ is minimised; what is the value of $D$?</p>


#### This solution is very slow
#### I found there are much faster solutions, but just find the correct answer by "accident". since they just return the first pair or pentagonals they found for wich the criteria are correct.
#### For my understanding the only way to definitly find the minimum D is by starting with the minimum D as a pentagonal and try if a pair of pentagonals can create this by matching all criteria.


def getPentagonalsList(start,end):
    Pentagonals = []
    for i in range(start,end+1):
        Pent = i * ( 3 * i - 1) / 2
        Pentagonals.append(int(Pent))
    return Pentagonals

def getPentagonal(num):
    Pent = num * ( 3 * num - 1) / 2
    return Pent

def isPentagonal(p):
    if p < 1:
        return False
    n = (1+((1+24*p)**0.5))/6
    return n%1 == 0

Pentagonals = getPentagonalsList(1,1000000)
minD = 999999
status = False

for k in range(0,len(Pentagonals)):
    Pk = Pentagonals[k]
    print(f"k:{k} | Pk:{Pk}")
    for j in range(0,len(Pentagonals)):
        Pj = Pentagonals[j]
        sumP = Pk+Pj
        diffP = abs(Pk-Pj)
        if isPentagonal(sumP) and isPentagonal(diffP):
            print(f"{Pk}:{Pj}")
            minD = min(minD, diffP)

print(f"minimised D: {minD}")